// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  username       String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  accounts           Account[]
  sessions           Session[]
  passwordResetToken passwordResetToken[]

  Shots Shot[]
  comments Comment[]
}

model passwordResetToken {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  createdAt DateTime  @default(now())
  resetAt   DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Shot {
  id           String @id @default(cuid())
  imageUrl     String @db.VarChar(255)

  title       String

  description String @db.VarChar(255) @default("")
  descriptionText String @default("")

  // create a one-to-one relationship with user
  user   User   @relation(fields: [userId], references: [id])
  userId String

  views    Int @default(0)
  saves    Int @default(0)
  likes    Int @default(0)
  comments Int @default(0)

  tags String[] @default([])

  createdAt DateTime @default(now())
}

model Like {
  id        String @id @default(cuid())
  shotId    String
  userId    String
}

model View {
  id        String @id @default(cuid())
  shotId    String
  userId    String
}

model Favourite {
  id        String @id @default(cuid())
  shotId    String
  userId    String
}

model Comment {
  id        String @id @default(cuid())
  shotId    String
  text      String

  user User   @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime @default(now())
}

model Message {
  id        String @id @default(cuid())

  senderId  String
  recipientId String

  title     String
  message      String

  createdAt DateTime @default(now())
}


